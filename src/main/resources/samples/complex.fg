factorial = num::BigInt -> BigInt {
  if(num <= 0, yield[IllegalArgException("Factorial of 0 or lower")])
  if(num == 1, yield[1])
  yield(num * factorial(num - 1))
}


5Factorial = lazy(factorial[5])


Pi = 3.14159 #inferred to Float

#sums an array of Ints into 1 Int declaratively
sum = nums::Int[] {
  yield(nums.reduce(add[]))
} #implicit yielded type Int

#Sums an array of Ints into 1 Int imperatively
explicitSum = nums::Int[] -> Int {
  mutable total = 0
  nums.each(num::Int -> Nothing {
    total += num
  })
  yield(total)
}

print = msg::Any -> Nothing {
  stdout.write(msg.toString())
  stdout.flush()
}

printLine = print.then(print["\n"]) #square brackets create a function rather than executing the function

User = struct {
  secret const DefaultPassword = "abc123"

  name::String
  mutable age::Int
  secret password::String = DefaultPassword

  sayHello = printLine("$name says Hello!")

  #This function takes a User and yields Nothing
  greet = other::User -> Nothing {
    sayHello()
    other.sayHello()
  }

  greetWithThen = User#sayHello.then(sayHello[])
}
