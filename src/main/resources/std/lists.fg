namespace std

struct Node {
    value::Any
    mutable next::Node = _
}

struct List {
    mutable head::Node = _


    add = (element::Any) -> _ {
        newNode = Node(element)
        if(head == _, {
            head = newNode
            println("Made new head " + element)
            yield()
        })

        mutable last = head
        loop(() -> last.next != _, {
            last = last.next
        })

        last.next = newNode
        println("Linked " + newNode + " to " + last)
    }
}

List.forEach = (consumer::(Any) -> _ ) -> _ {
    mutable current = head
    println(current)
    loop(() -> current != _, {
        consumer(current.value)

        current = current.next
    })
}
